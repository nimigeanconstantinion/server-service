spring:
  datasource:
    url: jdbc:mysql://localhost:3306/micro_db?useUnicode=true&characterEncoding=utf8&useSSL=false&createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true
    username: root
    password: root

  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate-dialect: org.hibernate.dialect.MySQL5Dialect
      hibernate.format_sql: true

    show-sql: true

#  zipkin:
#    base-url: http://localhost:9411/
#    collector:
#      host: localhost
#
#  sleuth:
#    sampler:
#      probability: 1.0
#
#  rabbitmq:
#    host: localhost
#    port: 5672
#    username: guest
#    password: guest
#
server:
  error:
    include-binding-errors: always
    include-message: always
  port: 8080
#
token:
  jwt:
    secretKey: 413F4428472783999G9329HND9032MPENKSE9UND0303900291NNE0DNQ9WQWN0239NDE94B6250655368566D5970337336763979244226452948404D6351
springdoc:
  api-docs:
    enabled: true
    common:
      version: 1.0.0
      title: Sample Microservices API
      description: Description of the API...
      termsOfService: MY TERMS OF SERVICE
      license: MY LICENSE
      licenseUrl: MY LICENSE URL
      externalDocDesc: MY WIKI PAGE
      externalDocUrl: MY WIKI URL
      contact:
        name: NAME OF CONTACT
        url: URL TO CONTACT
        email: contact@mail.com
    query-serv:
      description: "get list of all products from External DB"
      notes: |
        # Notes

        The service fetch list of MapStocOpt from external DB in purpose of updating owned DB

        The fetch will return :

        **1.** List of MapStocOpt object

        **2.** Will insert an entry in log.info with message :"Am reusit fetch din bd mapstoc" and the list.size

        # Test Title
          ljlljl





param:
  command-service: localhost
  query-service: localhost

#eureka:
#  client:
#    serviceUrl:
#      defaultZone: http://localhost:8761/eureka
#    fetch-registry: true
#    register-with-eureka: true
#
#metrics:
#  distribution:
#    percentiles-histogram:
#      http:
#        server:
#          requests: true
#
#management:
#  tracing:
#    sampling:
#      probability: 1.0 # only for testing purpose, switch back to 0.1 for production code
#
#  zipkin:
#    tracing:
#      endpoint: http://localhost:9411/api/v2/spans
#  endpoints:
#    web:
#      exposure:
#        include: health, info, prometheus
#  endpoint:
#    health:
#      show-details: always
#    prometheus:
#      enabled: true
#
#
#logging:
#  pattern:
#    level: '%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]'
#  level:
#    root: debug
#  file:
#    name: nserver-service.log
#
cors:
  allowed-origin: ${ADDITIONAL_CORS_ORIGIN:http://localhost:5000,http://localhost:3000,http://react-app.local,http://gateway:5000.http://gateway:3000}

